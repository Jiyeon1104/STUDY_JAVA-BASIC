데이터 전달 방식 2가지 (default는 GET)
GET : 주소창으로 전달		보안에 취약		대용량 불가		속도가 빠름
POST : 파일 내부로 심어서 전달	보안에 우수		대용량 가능		속도가 상대적으로 느림

Get 방식은 주소창에 사용자가 입력한 값들이 그대로 노출되는 것을 볼 수 있음
PW같은 보안이 필요한 값들까지 노출이 되면 문제가 됨
따라서 Post방식을 사용하면 이러한 문제점을 해결할 수 있음

servlet 서블렛은 Server Applet의 약자로 자바 기반의 동적 웹 프로그래밍 솔루션임
서블렛을 기반으로 JSP가 개발되었음
JSP 내부적으로는 서블릿으로 변환되어 수행됨
따라서 서블렛의 구성, 동작 방식을 이해하면 JSP를 이해하는데도 많은 도움이 됨

JSP는 서블렛에 비해 쉬운 프로그래밍 방법을 제공함
하지만 내부저긍로는 서블렛으로 변환하여 실행됨

servlet은 자바 코드 사이에 HTML코드를 끼워 넣어서 프로그래밍을 하는 형태이고 반대로
JSP는 HTML 코드 사이에 자바 코드를 끼워 넣어서 프로그래밍을 하는 형태

JSP
JSP스크립팅 요소 5가지

스크립틀릿(Scriptlet) <% %> 자바 코드 영역
주석 (Comment) <%-- --%> 주석 처리
지시어 (Directive) <%@ %> 정보
선언문 (Declaration) <%!	%> 함수 및 변수 정의
표현식 (Expression) <%=	%> 함수 변수 값 호출

1. 스크립틀릿 (Scriptlet)
가장 기본이 되는 스크립틀릿 Java 코드를 삽입하기 위한 목적
스크립틀릿 안에 정의된 코드는 서블릿으로 변환할 때 그대로 들어가게 됨

2. 주석 (Comment)
HTML 주석의 형태와 매우 유사함
<%-- jsp 주석 --%>

3. 지시어 (Directive > )
<%@		%>
골뱅이는 annotation, 즉 주석이나 부가 정보를 의미함
<%@ page ...%> 페이지 처리 방법 정의
<%@	include ...%> 다른 페이지 삽입
<%@	taglib ...%> 태그 라이브러리 접근

4. 선언문 (Declaration)
<%!	%>
함수나 변수의 선언이 가능함
대부분의 경우 스크립틀릿에서 선언이 가능하므로 사용 빈도가 적음
하지만 반드시 선언문에서 선언을 해야 할 경우도 있음

표현식 (Expression)
<%=	%>
표현식 태그로 함수나 변수의 호출이 가능함
표현식의 코드가 변수일 경우에는 실행 시 변수에 저장된 값이 출력되고 함수일 경우에는
주어진 함수를 호출하여 얻은 반환 값이 출력 됨

JSP에서의 한글 처리
1. <%@ page language="java" contentType="text/html; charset=UTF-8"
    pageEncoding="UTF-8"%> JSP 파일 생성 시 자동 입력됨

2. request.setCharacterEncoding("utf-8");
